generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String?
  email            String    @unique
  password         String?
  role             Role      @default(STAFF)
  invitationToken  String?   @unique
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  failedAttempts   Int       @default(0)
  lockedUntil      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  profession        String?
  qualifications    String?
  phoneNumber       String?
  verificationToken String?   @unique
  emailVerified     DateTime?

  testsCreated          Test[]
  testsUpdated          Test[]          @relation("TestUpdates")
  auditLogs             AuditLog[]
  patientsRegistered    Patient[]
  communications        Communication[]
  preference            UserPreference?
  notifications         Notification[]
  scheduledAppointments Appointment[]
}

enum CommunicationMethod {
  PHONE
  EMAIL
  SMS
}

enum CommunicationOutcome {
  SUCCESSFUL
  UNSUCCESSFUL
  NO_ANSWER
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  event     String
  details   String
  createdAt DateTime @default(now())
}

model Patient {
  id             String          @id @default(uuid())
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  email          String?
  phone          String?
  address        String
  hivStatus      HIVStatus
  medicalHistory String?
  riskFactors    String?
  consentForm    String?
  consentName    String
  consentDate    DateTime
  qrCode         String
  createdBy      String
  createdByUser  User            @relation(fields: [createdBy], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  tests          Test[]
  communications Communication[]
  appointments   Appointment[]
}

model PatientSelfRegistration {
  id             String                 @id @default(uuid())
  uniqueId       String                 @unique
  firstName      String
  lastName       String
  dateOfBirth    String
  email          String?
  phone          String?
  address        String
  hivStatus      HIVStatus
  medicalHistory String?
  riskFactors    String?
  consentName    String
  consentDate    String
  consent        Boolean
  status         SelfRegistrationStatus
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

enum SelfRegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum HIVStatus {
  POSITIVE
  NEGATIVE
  UNKNOWN
}

model Test {
  id             String          @id @default(uuid())
  patientId      String
  patient        Patient         @relation(fields: [patientId], references: [id])
  status         TestStatus
  collectionDate DateTime
  receivedDate   DateTime?
  processedDate  DateTime?
  resultDate     DateTime?
  result         String?
  notes          String?
  createdBy      String
  createdByUser  User            @relation(fields: [createdBy], references: [id])
  updatedBy      String?
  updatedByUser  User?           @relation("TestUpdates", fields: [updatedBy], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  communications Communication[]
}

model Communication {
  id                 String               @id @default(uuid())
  patientId          String
  patient            Patient              @relation(fields: [patientId], references: [id])
  testId             String
  test               Test                 @relation(fields: [testId], references: [id])
  method             CommunicationMethod
  outcome            CommunicationOutcome
  notes              String?
  followUpDate       DateTime?
  communicatedBy     String
  communicatedByUser User                 @relation(fields: [communicatedBy], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Appointment {
  id          String   @id @default(uuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  date        DateTime
  type        String
  notes       String?
  scheduledBy String
  scheduler   User     @relation(fields: [scheduledBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TestStatus {
  ISSUED
  COLLECTED
  RECEIVED
  IN_PROGRESS
  COMPLETED
  COMMUNICATED
}

enum Role {
  ADMIN
  STAFF
  LAB_TECHNICIAN
  CALL_CENTER_AGENT
}

model CommunicationLog {
  id           String   @id @default(uuid())
  method       String
  recipient    String
  content      String
  status       String
  errorMessage String?
  externalId   String
  createdAt    DateTime @default(now())
}

model UserPreference {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  theme           String   @default("light")
  dashboardLayout Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
