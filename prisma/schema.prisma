generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(cuid())
  name               String?
  email              String     @unique
  password           String?
  role               Role       @default(STAFF)
  invitationToken    String?    @unique
  resetToken         String?    @unique
  resetTokenExpiry   DateTime?
  failedAttempts     Int        @default(0)
  lockedUntil        DateTime?
  auditLogs          AuditLog[]
  patientsRegistered Patient[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  event     String
  details   String
  createdAt DateTime @default(now())
}

model Patient {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  email         String?
  phone         String?
  consentForm   String?
  qrCode        String
  createdBy     String
  createdByUser User     @relation(fields: [createdBy], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tests         Test[]
}

model Test {
  id             String     @id @default(cuid())
  patientId      String
  patient        Patient    @relation(fields: [patientId], references: [id])
  status         TestStatus
  collectionDate DateTime
  resultDate     DateTime?
  result         String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

enum Role {
  ADMIN
  STAFF
  LAB_TECHNICIAN
  CALL_CENTER_AGENT
}

enum TestStatus {
  COLLECTED
  IN_PROGRESS
  COMPLETED
  COMMUNICATED
}

// model User {
//   id            String          @id @default(cuid())
//   name          String?
//   email         String          @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   // Optional for WebAuthn support
//   Authenticator Authenticator[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([provider, providerAccountId])
// }

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@id([identifier, token])
// }

// // Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }
